name: 'Terraform Apply for kubernetes cluster in AWS using Vault secrets - works on changes in a PR'
description: 'This action will perform kubernetes cluster deployment in AWS account using Terraform using secrets in Hashicorp Vault.'
author: Paresh Deshmukh
branding:
  icon: globe
  color: purple
inputs:
  tf-working-dir:
    required: true
    description: 'Terraform working directory'
  terraform-version:
    required: true
    description: 'Terraform version'
  cluster-name:
    required: true
    description: 'Name of the kubernetes cluster'
  aws-role-to-assume:
    required: true
    description: 'Role ARN in AWS with which the connection to AWS will be established'
  aws-region:
    required: true
    description: 'AWS region'
  vault-github-token:
    required: true
    description: 'GitHub Token used for accessing Vault'
  github-token:
    required: true
    description: 'Pass secret GITHUB_TOKEN'
  private-ssh-key:
    required: true
    description: 'ssh key to clone the terraform modules from the remote repo'
  pr-dir:
    required: false
    description: 'full path of a directory in a PR to filter for the terraform apply'
  tf-plan-output-filename:
    required: true
    description: 'Name of the output file for terraform plan command'
  apply-terraform:
    required: false
    description: 'Pass true/false to apply the terraform changes with provided tf-plan-output-filename'
    default: 'false'
outputs:
  tf-fmt-outcome:
    description: Outcome of the 'terraform fmt' command
    value: ${{ steps.fmt.outcome }}
  tf-init-outcome:
    description: Outcome of the 'terraform init' command
    value: ${{ steps.init.outcome }}
  tf-plan-output:
    description: Output of the 'terraform plan' command
    value: ${{ steps.plan.outputs.stdout }}
  tf-plan-outcome:
    description: Outcome of the 'terraform plan' command either success or failure
    value: ${{ steps.plan.outcome }}  
runs:
  using: "composite"
  steps:
    # setup kubectl
    - name: install kubectl
      if:  ${{ inputs.apply-terraform == 'false' }} 
      shell: bash
      run: |
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        curl -LO "https://dl.k8s.io/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256"
        echo "$(cat kubectl.sha256)  kubectl" | sha256sum --check
        
        chmod +x kubectl
        mkdir -p ~/.local/bin
        mv ./kubectl ~/.local/bin/kubectl
        
        kubectl version --client
        
    # install kops
    - name: install kops
      if:  ${{ inputs.apply-terraform == 'false' }} 
      shell: bash
      run: |
        curl -Lo kops https://github.com/kubernetes/kops/releases/download/$(curl -s https://api.github.com/repos/kubernetes/kops/releases/latest | grep tag_name | cut -d '"' -f 4)/kops-linux-amd64
        chmod +x kops
        sudo mv kops /usr/local/bin/kops
    
    # install aws cli
    - name: install aws cli
      if:  ${{ inputs.apply-terraform == 'false' }} 
      shell: bash
      run: |
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip -o awscliv2.zip
        sudo ./aws/install --update
        
    # setup the latest version of the vault CLI. 
    - name: Setup Vault CLI 
      if:  ${{ inputs.apply-terraform == 'false' }} 
      uses: eLco/setup-vault@v1.0.1
    
    # install terraform version
    - name: HashiCorp - Setup Terraform
      if:  ${{ inputs.apply-terraform == 'false' }} 
      uses: hashicorp/setup-terraform@v2.0.0
      with:
        # The version of Terraform CLI to install
        terraform_version: ${{ inputs.terraform-version }}

    - name: Get the targets for terraform plan and apply
      if:  ${{ inputs.apply-terraform == 'false' }} 
      id: get-targets
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
      shell: bash
      run: |
        echo "Get the string of the targets to pass it to the terraform plan and apply"

        export files_changed=$(gh pr view ${{ github.event.pull_request.number }} --json files --jq '.files.[].path')
        echo "Files changed in a PR:" $files_changed
        
        chmod +x $GITHUB_ACTION_PATH/get-tf-targets.sh
        
        targets=$(sh $GITHUB_ACTION_PATH/get-tf-targets.sh "${files_changed[@]}" ${{ inputs.pr-dir }})
        
        echo "targets: " $targets
        
        echo ::set-output name=targets::$targets

    - name: Vault Login
      if:  ${{ inputs.apply-terraform == 'false' }} 
      shell: bash
      run: |
        vault login -address=https://vault.${{ inputs.cluster-name }}/ -method=github token=${{ inputs.vault-github-token }}
    
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      if:  ${{ inputs.apply-terraform == 'false' }} 
      with:
        role-to-assume: ${{ inputs.aws-role-to-assume }}
        aws-region: ${{ inputs.aws-region }}

    - name: export kops config
      shell: bash
      if:  ${{ inputs.apply-terraform == 'false' }} 
      run: |
        kops export kubeconfig --name ${{ inputs.cluster-name }} --state s3://kops-${{ inputs.cluster-name }} --admin
        # Shows which is the active context
        kubectl config current-context

        # Allows you to switch between contexts using their name
        kubectl config use-context ${{ inputs.cluster-name }}
    
    # Add ssh keys for ssh-agent
    - name: Add ssh keys for ssh-agent
      uses: webfactory/ssh-agent@v0.5.4
      if:  ${{ inputs.apply-terraform == 'false' }} 
      with:
          ssh-private-key: ${{ inputs.private-ssh-key }}
        
    #check for the format
    - name: Terraform fmt
      id: fmt
      if:  ${{ inputs.apply-terraform == 'false' }} 
      shell: bash
      continue-on-error: true
      run: |
        cd ${PWD}/${{ inputs.tf-working-dir }}
        echo "terraform fmt -check"
        terraform fmt -check
      
    # Run terraform version     
    - id: version
      name: Terraform version
      shell: bash
      if:  ${{ inputs.apply-terraform == 'false' }} 
      run : |
        cd ${PWD}/${{ inputs.tf-working-dir }}
        pwd
        echo "Get terraform version"
        terraform -v

    # Run terraform init 
    - id: init
      name: Terraform Init
      shell: bash
      if:  ${{ inputs.apply-terraform == 'false' }} 
      run : |
        cd ${PWD}/${{ inputs.tf-working-dir }}
        pwd
        
        echo "terraform init"
        terraform init 
    
    # Run terraform plan 
    - name: terraform plan
      id: plan
      shell: bash
      if:  ${{ inputs.apply-terraform == 'false' }} 
      run: |
        echo "Run terraform plan and get the output."
        cd ${PWD}/${{ inputs.tf-working-dir }}
        pwd
        terraform plan -lock=false -no-color ${{ steps.get-targets.outputs.targets }} -out=${{ inputs.tf-plan-output-filename }}
      continue-on-error: true
  
    # Fail if Terraform Plan Status is failure
    - name: Terraform Plan Status
      id: check-plan-status
      shell: bash
      if:  ${{ inputs.apply-terraform == 'false' && steps.plan.outcome == 'failure' }} 
      run: exit 1

    # Write back to the PR the output of the terraform plan
    - name: get PR comment
      uses: actions/github-script@v6
      if:  ${{ inputs.apply-terraform == 'false' }} 
      id: prepare-comment
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          // 1. Prepare format of the comment
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          
          <details><summary>Show Plan</summary>
          
          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`
          
          </details>
          
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`,  Workflow: \`${{ github.workflow }}\`, Cluster: \`${{ inputs.cluster-name }}\`, Dir: \`${{ inputs.tf-working-dir }}\`*`;
          
          // 2. Create a new comment
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })
          

    # Terraform apply
    - name: Terraform apply
      id: apply
      shell: bash
      if:  ${{ inputs.apply-terraform == 'true' }} 
      run: |
        echo "Run terraform apply."
        cd ${PWD}/${{ inputs.tf-working-dir }}
        pwd
        terraform apply ${{ inputs.tf-plan-output-filename }}
        
